[{"title":"CentOS7安装MySQL5.7","url":"/zxk-blog.github.io/2022/01/10/CentOS7%E5%AE%89%E8%A3%85MySQL5-7/","content":"1、安装MySQL源\n# 下载mysql安装包[root@VM-8-12-centos local]# wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm# 安装源[root@VM-8-12-centos ~]# yum -y localinstall mysql57-community-release-el7-11.noarch.rpm\n2、yum安装mysql (需要一点时间)\n[root@VM-8-12-centos ~]# yum -y install mysql-community-server\n3、启动mysql服务\n[root@VM-8-12-centos ~]# systemctl start mysqld\n4、设置开机启动\n[root@VM-8-12-centos ~]# systemctl enable mysqld[root@VM-8-12-centos ~]# systemctl daemon-reload\n5、修改root登录密码mysql安装完成后，&#x2F;var&#x2F;log&#x2F;mysqld.log文件中生成一个默认root临时密码\n[root@VM-8-12-centos ~]# vim /var/log/mysqld.log\n使用这个密码登录mysql修改root密码，并设置远程登录\n# 修改root密码mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;5gHQn82jw$Ijs@kU&#x27;;Query OK, 0 rows affected (0.00 sec)# 设置远程登录mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;5gHQn82jw$Ijs@kU&#x27; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.00 sec)\n6、重启mysql\n[root@VM-8-12-centos ~]# systemctl restart mysqld\n\n7、测试远程登录\n","categories":["环境安装"],"tags":["CentOS软件安装"]},{"title":"aiohttp库使用及封装","url":"/zxk-blog.github.io/2022/01/21/aiohttp%E5%BA%93%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B0%81%E8%A3%85/","content":"关于aiohttpaiohttp 是一个基于asyncio的异步http网络模块，分为了客户端和服务端，同时支持websocket的使用。在写爬虫的时候，同常用的 requests 库，它是同步库，会阻塞asyncio，所以不能在异步的环境中直接使用。而aiohttp是基于异步的、效率非常高的爬虫请求库，配合asyncio协程可以发挥非常高的效率。\nrequests 和 requests+线程 以及使用 aiohttp 对比这里测试一下requests进行循环访问、requests+线程池、以及使用aiohttp这三种方式访问网址2000次返回所用时间。 首先用aiohttp创建一个本地服务，地址为127.0.0.1:5000。然后启动，作为被爬取的api接口，\nfrom aiohttp import webasync def home(request: web.Request) -&gt; web.Response:    return web.Response(text=&quot;Hi&quot;)async def init_app() -&gt; web.Application:    app = web.Application()    app.add_routes([web.get(&quot;/&quot;, home)])    return appweb.run_app(init_app(), port=5000)\n编写爬虫脚本，分别使用三种方式访问接口，测试用时：\nimport requestsimport timeitfrom concurrent.futures import ThreadPoolExecutorimport aiohttpimport asynciosession = requests.session()url = &quot;http://127.0.0.1:5000&quot;Count = 2000def req(url: str):    req = requests.get(url)    req.status_codedef requests_test():    &quot;&quot;&quot;    第一组:循环的方式    :return:    &quot;&quot;&quot;    for i in range(Count):        req(url)def pool_requests_test():    &quot;&quot;&quot;    第二组:线程池的方式    :return:    &quot;&quot;&quot;    url_list = [url for _ in range(Count)]    with ThreadPoolExecutor(max_workers=20) as pool:        pool.map(req, url_list)async def fetch(url: str, sem):    async with sem:        async with aiohttp.ClientSession() as session:            async with session.get(url) as req:                req.statusasync def start():    sem = asyncio.Semaphore(20)    tasks = [asyncio.create_task(fetch(url, sem)) for _ in range(Count)]    await asyncio.wait(tasks)def aiohttp_test():    &quot;&quot;&quot;    第三组:aiohttp 的方式    :param url:    :return:    &quot;&quot;&quot;    asyncio.run(start())if __name__ == &#x27;__main__&#x27;:    # 循环的    print(timeit.timeit(stmt=requests_test, number=1))    # # 使用线程池的    # print(timeit.timeit(stmt=pool_requests_test, number=1))    # # 使用 aiohttp 的    # print(timeit.timeit(stmt=aiohttp_test, number=1))\n结果：\n3.01244679999999982.23112219999999971.1936984\n使用aiohttp的用时是最短的。\n","categories":["Python爬虫"],"tags":["Python库使用"]},{"title":"CentOS安装Python3","url":"/zxk-blog.github.io/2022/01/02/CentOS%E5%AE%89%E8%A3%85Python3/","content":"安装python31、首先安装依赖环境\nyum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel\n2、 下载python3的源码，版本根据自己需求选择，官网网址：https://www.python.org/downloads/source/，下载taz格式的压缩包文件3、下载完成后，把安装包放入centos7 root用户目录中，解压：\ntar -zxvf Python-3.7.8.tgz\n4、建立一个空文件夹，用户放python程序，推荐以下路径\nmkdir /usr/local/python3\n\n5、进入解压后的python3安装包文件夹，编译，编译安装\ncd Python-3.7.8/./configure --prefix=/usr/local/python3make &amp;&amp; make install\n没有提示错误就表示安装成功\n6、建立软连接\nln -s /usr/local/python3/bin/python3.7 /usr/bin/python3ln -s /usr/local/python3/bin/pip3.7 /usr/bin/pip3\n\n7、添加环境变量编辑&#x2F;etc&#x2F;profile文件\nvim /etc/profile\n在最后一行添加\nexport PATH=$PATH:/usr/local/python3/bin\n应用path\nsource /etc/profile\n\n8、测试python3和pip3是否可用命令行输入python3输入pip3 list如图正常显示，安装完成。\n卸载python31、卸载python3\nrpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps\n2、删除所有残余文件\nwhereis python3 |xargs rm -frv\n3、查看现有安装的python\nwhereis   python\n\n\n\n","categories":["环境安装"],"tags":["CentOS软件安装"]},{"title":"CentOS7安装Redis数据库","url":"/zxk-blog.github.io/2022/01/07/CentOS7%E5%AE%89%E8%A3%85Redis%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"安装redis1、下载redis\n[root@VM-8-12-centos downfiloadfile]# wget http://download.redis.io/releases/redis-6.2.5.tar.gz\n2、解压\n[root@VM-8-12-centos downfiloadfile]# tar xzvf redis-6.2.5.tar.gz\n3、安装rediscd 到redis安装包的解压目录下，安装redis\n[root@VM-8-12-centos downfiloadfile]# cd redis-6.2.5/[root@VM-8-12-centos redis-6.2.5]# make# 需要等一点时间编译[root@VM-8-12-centos redis-6.2.5]# cd src/[root@VM-8-12-centos src]# make install PREFIX=/usr/local/redis\n4、返回redis解压文件，将redis配置文件移动到安装目录下\n[root@VM-8-12-centos src]# cd ../[root@VM-8-12-centos redis-6.2.5]# cp redis.conf /usr/local/redis/bin\n5、配置redis后台启动编辑redis.conf配置文件，将daemonize no改成daemonize yes\n[root@VM-8-12-centos redis-6.2.5]# vi /usr/local/redis/bin/redis.conf\n6、将redis加入到开机启动\n[root@VM-8-12-centos redis-6.2.5]# vi /etc/rc.local\n往里面添加 (开机调用开启redis命令)\n/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf\n7、启动redis\n[root@VM-8-12-centos ~]# /usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf \n8、查看redis是否启动\n[root@VM-8-12-centos ~]# ps -ef|grep redis\n9、配置redis-cli软连接\n[root@VM-8-12-centos bin]# ln -s /usr/local/redis/bin/redis-cli /usr/bin/redis\n10、安装完成\n配置远程连接1、编辑redis配置文件redis.conf将bind 127.0.0.1改为bind 0.0.0.0 (支持所有连接访问)将protected-mode yes 改为no （允许公网访问）2、redis添加登录密码（不改密码的话，可以忽略这一步）将redis.conf配置文件里requirepass foobared取消注释，并且改为自定义密码3、重启redis\n# 关闭redis[root@VM-8-12-centos ~]# pkill redis# 启动redis[root@VM-8-12-centos ~]# /usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf\n4、查看redis服务\n[root@VM-8-12-centos ~]# ps -ef|grep redis\n可以看到redis服务已经不是127.0.0.1而是我们设置的0.0.0.0 （这里我自己端口号改成了6397，同样在redis.conf里改，参数是port ****）5、测试远程连接\n\n卸载redis# 删除安装目录rm -rf /usr/local/redis\n","categories":["环境安装"],"tags":["CentOS软件安装"]},{"title":"Charles安卓7.0以上抓包","url":"/zxk-blog.github.io/2022/05/05/Charles%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%8A%93%E5%8C%85/","content":"Windows安装Charles破解版安装包下载地址：https://fenxiangdayuan.lanzoux.com/ixZxghllc9a\n1、下载破解安装包，解压，点击安装2、点击同意安装协议，选择自己的安装路径，点击下一步安装\n3、安装完成后，进入安装好的Charles文件里，进入lib文件，将原生charles.jar替换成破解包里的charles.jar4、可以正常打开， windows安装Charles完成。\n\nCharles设置https抓包功能1、点击 Proxy，SSL Proxying Settings2、在弹出的弹框在，选中Enable SSL Proxying，添加端口号，Host和Port都填 * ，点击OK3、设置代理点击 Proxy，Proxy settings端口号8888，勾选Enable transparent HTTP proxying，选择HTTP Proxy Mode，点击OK\n\nWindows用Charles抓包设置1、电脑安装SSL证书点击Help，SSL Proxying，Install Charles Root Certificate Help 设置电脑弹出证书，点击安装证书选择本地计算机， 点击下一步选择所有的证书都放入下列存储选择受信任的根证书颁发机构点击确定，点击下一页点击完成，证书导入成功\n2、浏览器安装ssl证书点击Help，SSL Proxying，Install Charles Root Certificate on a Mobile Device or Remote Browser 设置弹出如下提示框浏览器输入 chls.pro&#x2F;ssl 下载证书到本地打开浏览器设置，证书管理，导入证书，以火狐浏览器为例子搜索证书，点击查看证书点击导入导入刚才下载的ssl证书至此，电脑和浏览器证书安装完成\n\n安卓7以上使用Charles抓包需要：一部root过的安卓手机本文使用： piexl2 欧版 Android8.0系统\n安卓7以上，安卓系统默认不信任用户安装的外部证书，需要吧SSL证书安装到安卓系统证书目录里\n1、导出证书，证书改名弹出如下提示框浏览器输入 chls.pro&#x2F;ssl 下载证书到本地2、输出证书内容，查看证书将要改的名称（这里Windows没有openssl的话，需要自行安装）输入 openssl x509 -inform PEM -subject_hash_old -in xxx.pem输出的第一行为修改后证书名称\n3、修改证书名称为xxx.0\n4、将证书通过adb push传入安装手机 &#x2F;sdcard&#x2F; 文件下adb push xxx.0 &#x2F;sdcard&#x2F;\n5、adb 连接手机，su切换到root用户，cd到 &#x2F;sdcard&#x2F;可以看到证书已经在里面了\n6、将证书移动到 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F; 路径下，这个路径就是安卓的系统证书路径如果遇到 Read-only file system 错误执行命令：mount -o rw,remount &#x2F;system如果失败也可以执行命令：mount -o rw,remount &#x2F;\n7、给证书权限执行命令：chmod 777 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;xxx.0\n8、重启手机执行命令：reboot9、手机端口设置手机和电脑连同一wifi网络手机点击修改网络，代理设置手动，主机地址设置电脑ip地址，端口号设置8888，点击保存。\n至此，手机端抓包设置完成！可以开始抓包了！\n","categories":["环境安装"],"tags":["安卓软件安装","抓包","Win软件安装"]},{"title":"Python提取且补全出字符串中的省市县","url":"/zxk-blog.github.io/2022/06/13/Python%E6%8F%90%E5%8F%96%E4%B8%94%E8%A1%A5%E5%85%A8%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%9C%81%E5%B8%82%E5%8E%BF/","content":"编写中…\n需求：提取出文字中的地址信息例子:\ncontent = &#x27;北京海淀魏公村到山西襄垣&#x27;\n解析地址后结果是：\nstart_address = &#x27;北京市海淀区魏公村&#x27;end_address = &#x27;山西省长治市襄垣县&#x27;\n\n\n难点：本来以为是一个很简单的需求，但是实际作的过程中发现有一些坑。总结出需要解决的问题：1、用户出入地址文本并不是以结构的地址输入的，几乎所有的用户都只会写地址的简称，例如 海淀区-海淀、呼和浩特-呼市等，所以通过全称是匹配不出来字符串中的地址的，需要通过简称匹配，然后再对应上全称。2、地址越细分，就会有重复的地名，如：河南省开封市鼓楼区-江苏省徐州市鼓楼区。所有需要将所有重复地名的地方都列出来，防止地址错误3、地址简称被另一个简称覆盖情况, 用户发的地址是 乌兰浩特，但青海省海西蒙古族藏族自治州乌兰县的县简称是乌兰，根据字符匹配就容易用乌兰将乌兰浩特关联起来。所以也需要将涉及简称覆盖的简称也都列出来\n","categories":["Python"],"tags":["Python脚本"]},{"title":"Hello World","url":"/zxk-blog.github.io/2021/07/04/hello-world/","content":"我不当人了！\n","categories":["其他"]}]